# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdBookmarks200Ok(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bookmark_id=None, create_date=None, creator_id=None, folder_id=None, memo=None, note=None, owner_id=None, target=None):
        """
        GetCharactersCharacterIdBookmarks200Ok - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bookmark_id': 'int',
            'create_date': 'datetime',
            'creator_id': 'int',
            'folder_id': 'int',
            'memo': 'str',
            'note': 'str',
            'owner_id': 'int',
            'target': 'GetCharactersCharacterIdBookmarksTarget'
        }

        self.attribute_map = {
            'bookmark_id': 'bookmark_id',
            'create_date': 'create_date',
            'creator_id': 'creator_id',
            'folder_id': 'folder_id',
            'memo': 'memo',
            'note': 'note',
            'owner_id': 'owner_id',
            'target': 'target'
        }

        self._bookmark_id = bookmark_id
        self._create_date = create_date
        self._creator_id = creator_id
        self._folder_id = folder_id
        self._memo = memo
        self._note = note
        self._owner_id = owner_id
        self._target = target

    @property
    def bookmark_id(self):
        """
        Gets the bookmark_id of this GetCharactersCharacterIdBookmarks200Ok.
        bookmark_id integer

        :return: The bookmark_id of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: int
        """
        return self._bookmark_id

    @bookmark_id.setter
    def bookmark_id(self, bookmark_id):
        """
        Sets the bookmark_id of this GetCharactersCharacterIdBookmarks200Ok.
        bookmark_id integer

        :param bookmark_id: The bookmark_id of this GetCharactersCharacterIdBookmarks200Ok.
        :type: int
        """
        if bookmark_id is None:
            raise ValueError("Invalid value for `bookmark_id`, must not be `None`")

        self._bookmark_id = bookmark_id

    @property
    def create_date(self):
        """
        Gets the create_date of this GetCharactersCharacterIdBookmarks200Ok.
        create_date string

        :return: The create_date of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this GetCharactersCharacterIdBookmarks200Ok.
        create_date string

        :param create_date: The create_date of this GetCharactersCharacterIdBookmarks200Ok.
        :type: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")

        self._create_date = create_date

    @property
    def creator_id(self):
        """
        Gets the creator_id of this GetCharactersCharacterIdBookmarks200Ok.
        creator_id integer

        :return: The creator_id of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this GetCharactersCharacterIdBookmarks200Ok.
        creator_id integer

        :param creator_id: The creator_id of this GetCharactersCharacterIdBookmarks200Ok.
        :type: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def folder_id(self):
        """
        Gets the folder_id of this GetCharactersCharacterIdBookmarks200Ok.
        folder_id integer

        :return: The folder_id of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """
        Sets the folder_id of this GetCharactersCharacterIdBookmarks200Ok.
        folder_id integer

        :param folder_id: The folder_id of this GetCharactersCharacterIdBookmarks200Ok.
        :type: int
        """

        self._folder_id = folder_id

    @property
    def memo(self):
        """
        Gets the memo of this GetCharactersCharacterIdBookmarks200Ok.
        memo string

        :return: The memo of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """
        Sets the memo of this GetCharactersCharacterIdBookmarks200Ok.
        memo string

        :param memo: The memo of this GetCharactersCharacterIdBookmarks200Ok.
        :type: str
        """
        if memo is None:
            raise ValueError("Invalid value for `memo`, must not be `None`")

        self._memo = memo

    @property
    def note(self):
        """
        Gets the note of this GetCharactersCharacterIdBookmarks200Ok.
        note string

        :return: The note of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this GetCharactersCharacterIdBookmarks200Ok.
        note string

        :param note: The note of this GetCharactersCharacterIdBookmarks200Ok.
        :type: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def owner_id(self):
        """
        Gets the owner_id of this GetCharactersCharacterIdBookmarks200Ok.
        owner_id integer

        :return: The owner_id of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this GetCharactersCharacterIdBookmarks200Ok.
        owner_id integer

        :param owner_id: The owner_id of this GetCharactersCharacterIdBookmarks200Ok.
        :type: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def target(self):
        """
        Gets the target of this GetCharactersCharacterIdBookmarks200Ok.

        :return: The target of this GetCharactersCharacterIdBookmarks200Ok.
        :rtype: GetCharactersCharacterIdBookmarksTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this GetCharactersCharacterIdBookmarks200Ok.

        :param target: The target of this GetCharactersCharacterIdBookmarks200Ok.
        :type: GetCharactersCharacterIdBookmarksTarget
        """

        self._target = target

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdBookmarks200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
