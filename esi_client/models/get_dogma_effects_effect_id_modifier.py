# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetDogmaEffectsEffectIdModifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, domain=None, func=None, modified_attribute_id=None, modifying_attribute_id=None, operator=None):
        """
        GetDogmaEffectsEffectIdModifier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'domain': 'str',
            'func': 'str',
            'modified_attribute_id': 'int',
            'modifying_attribute_id': 'int',
            'operator': 'int'
        }

        self.attribute_map = {
            'domain': 'domain',
            'func': 'func',
            'modified_attribute_id': 'modified_attribute_id',
            'modifying_attribute_id': 'modifying_attribute_id',
            'operator': 'operator'
        }

        self._domain = domain
        self._func = func
        self._modified_attribute_id = modified_attribute_id
        self._modifying_attribute_id = modifying_attribute_id
        self._operator = operator

    @property
    def domain(self):
        """
        Gets the domain of this GetDogmaEffectsEffectIdModifier.
        domain string

        :return: The domain of this GetDogmaEffectsEffectIdModifier.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this GetDogmaEffectsEffectIdModifier.
        domain string

        :param domain: The domain of this GetDogmaEffectsEffectIdModifier.
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def func(self):
        """
        Gets the func of this GetDogmaEffectsEffectIdModifier.
        func string

        :return: The func of this GetDogmaEffectsEffectIdModifier.
        :rtype: str
        """
        return self._func

    @func.setter
    def func(self, func):
        """
        Sets the func of this GetDogmaEffectsEffectIdModifier.
        func string

        :param func: The func of this GetDogmaEffectsEffectIdModifier.
        :type: str
        """
        if func is None:
            raise ValueError("Invalid value for `func`, must not be `None`")

        self._func = func

    @property
    def modified_attribute_id(self):
        """
        Gets the modified_attribute_id of this GetDogmaEffectsEffectIdModifier.
        modified_attribute_id integer

        :return: The modified_attribute_id of this GetDogmaEffectsEffectIdModifier.
        :rtype: int
        """
        return self._modified_attribute_id

    @modified_attribute_id.setter
    def modified_attribute_id(self, modified_attribute_id):
        """
        Sets the modified_attribute_id of this GetDogmaEffectsEffectIdModifier.
        modified_attribute_id integer

        :param modified_attribute_id: The modified_attribute_id of this GetDogmaEffectsEffectIdModifier.
        :type: int
        """
        if modified_attribute_id is None:
            raise ValueError("Invalid value for `modified_attribute_id`, must not be `None`")

        self._modified_attribute_id = modified_attribute_id

    @property
    def modifying_attribute_id(self):
        """
        Gets the modifying_attribute_id of this GetDogmaEffectsEffectIdModifier.
        modifying_attribute_id integer

        :return: The modifying_attribute_id of this GetDogmaEffectsEffectIdModifier.
        :rtype: int
        """
        return self._modifying_attribute_id

    @modifying_attribute_id.setter
    def modifying_attribute_id(self, modifying_attribute_id):
        """
        Sets the modifying_attribute_id of this GetDogmaEffectsEffectIdModifier.
        modifying_attribute_id integer

        :param modifying_attribute_id: The modifying_attribute_id of this GetDogmaEffectsEffectIdModifier.
        :type: int
        """
        if modifying_attribute_id is None:
            raise ValueError("Invalid value for `modifying_attribute_id`, must not be `None`")

        self._modifying_attribute_id = modifying_attribute_id

    @property
    def operator(self):
        """
        Gets the operator of this GetDogmaEffectsEffectIdModifier.
        operator integer

        :return: The operator of this GetDogmaEffectsEffectIdModifier.
        :rtype: int
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this GetDogmaEffectsEffectIdModifier.
        operator integer

        :param operator: The operator of this GetDogmaEffectsEffectIdModifier.
        :type: int
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetDogmaEffectsEffectIdModifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
