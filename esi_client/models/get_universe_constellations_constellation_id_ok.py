# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetUniverseConstellationsConstellationIdOk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, constellation_id=None, name=None, position=None, region_id=None, systems=None):
        """
        GetUniverseConstellationsConstellationIdOk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'constellation_id': 'int',
            'name': 'str',
            'position': 'GetUniverseConstellationsConstellationIdPosition',
            'region_id': 'int',
            'systems': 'list[int]'
        }

        self.attribute_map = {
            'constellation_id': 'constellation_id',
            'name': 'name',
            'position': 'position',
            'region_id': 'region_id',
            'systems': 'systems'
        }

        self._constellation_id = constellation_id
        self._name = name
        self._position = position
        self._region_id = region_id
        self._systems = systems

    @property
    def constellation_id(self):
        """
        Gets the constellation_id of this GetUniverseConstellationsConstellationIdOk.
        constellation_id integer

        :return: The constellation_id of this GetUniverseConstellationsConstellationIdOk.
        :rtype: int
        """
        return self._constellation_id

    @constellation_id.setter
    def constellation_id(self, constellation_id):
        """
        Sets the constellation_id of this GetUniverseConstellationsConstellationIdOk.
        constellation_id integer

        :param constellation_id: The constellation_id of this GetUniverseConstellationsConstellationIdOk.
        :type: int
        """
        if constellation_id is None:
            raise ValueError("Invalid value for `constellation_id`, must not be `None`")

        self._constellation_id = constellation_id

    @property
    def name(self):
        """
        Gets the name of this GetUniverseConstellationsConstellationIdOk.
        name string

        :return: The name of this GetUniverseConstellationsConstellationIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetUniverseConstellationsConstellationIdOk.
        name string

        :param name: The name of this GetUniverseConstellationsConstellationIdOk.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """
        Gets the position of this GetUniverseConstellationsConstellationIdOk.

        :return: The position of this GetUniverseConstellationsConstellationIdOk.
        :rtype: GetUniverseConstellationsConstellationIdPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this GetUniverseConstellationsConstellationIdOk.

        :param position: The position of this GetUniverseConstellationsConstellationIdOk.
        :type: GetUniverseConstellationsConstellationIdPosition
        """

        self._position = position

    @property
    def region_id(self):
        """
        Gets the region_id of this GetUniverseConstellationsConstellationIdOk.
        The region this constellation is in

        :return: The region_id of this GetUniverseConstellationsConstellationIdOk.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """
        Sets the region_id of this GetUniverseConstellationsConstellationIdOk.
        The region this constellation is in

        :param region_id: The region_id of this GetUniverseConstellationsConstellationIdOk.
        :type: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def systems(self):
        """
        Gets the systems of this GetUniverseConstellationsConstellationIdOk.
        systems array

        :return: The systems of this GetUniverseConstellationsConstellationIdOk.
        :rtype: list[int]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """
        Sets the systems of this GetUniverseConstellationsConstellationIdOk.
        systems array

        :param systems: The systems of this GetUniverseConstellationsConstellationIdOk.
        :type: list[int]
        """
        if systems is None:
            raise ValueError("Invalid value for `systems`, must not be `None`")

        self._systems = systems

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetUniverseConstellationsConstellationIdOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
