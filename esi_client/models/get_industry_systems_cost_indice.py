# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetIndustrySystemsCostIndice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activity=None, cost_index=None):
        """
        GetIndustrySystemsCostIndice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activity': 'str',
            'cost_index': 'float'
        }

        self.attribute_map = {
            'activity': 'activity',
            'cost_index': 'cost_index'
        }

        self._activity = activity
        self._cost_index = cost_index

    @property
    def activity(self):
        """
        Gets the activity of this GetIndustrySystemsCostIndice.
        activity string

        :return: The activity of this GetIndustrySystemsCostIndice.
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """
        Sets the activity of this GetIndustrySystemsCostIndice.
        activity string

        :param activity: The activity of this GetIndustrySystemsCostIndice.
        :type: str
        """
        allowed_values = ["none", "manufacturing", "researching_technology", "researching_time_efficiency", "researching_material_efficiency", "copying", "duplicating", "invention", "reverse_engineering"]
        if activity not in allowed_values:
            raise ValueError(
                "Invalid value for `activity` ({0}), must be one of {1}"
                .format(activity, allowed_values)
            )

        self._activity = activity

    @property
    def cost_index(self):
        """
        Gets the cost_index of this GetIndustrySystemsCostIndice.
        cost_index number

        :return: The cost_index of this GetIndustrySystemsCostIndice.
        :rtype: float
        """
        return self._cost_index

    @cost_index.setter
    def cost_index(self, cost_index):
        """
        Sets the cost_index of this GetIndustrySystemsCostIndice.
        cost_index number

        :param cost_index: The cost_index of this GetIndustrySystemsCostIndice.
        :type: float
        """
        if cost_index is None:
            raise ValueError("Invalid value for `cost_index`, must not be `None`")

        self._cost_index = cost_index

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetIndustrySystemsCostIndice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
