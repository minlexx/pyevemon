# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PostUiOpenwindowNewmailNewMail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, body=None, recipients=None, subject=None, to_corp_or_alliance_id=None, to_mailing_list_id=None):
        """
        PostUiOpenwindowNewmailNewMail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'body': 'str',
            'recipients': 'list[int]',
            'subject': 'str',
            'to_corp_or_alliance_id': 'int',
            'to_mailing_list_id': 'int'
        }

        self.attribute_map = {
            'body': 'body',
            'recipients': 'recipients',
            'subject': 'subject',
            'to_corp_or_alliance_id': 'to_corp_or_alliance_id',
            'to_mailing_list_id': 'to_mailing_list_id'
        }

        self._body = body
        self._recipients = recipients
        self._subject = subject
        self._to_corp_or_alliance_id = to_corp_or_alliance_id
        self._to_mailing_list_id = to_mailing_list_id

    @property
    def body(self):
        """
        Gets the body of this PostUiOpenwindowNewmailNewMail.
        body string

        :return: The body of this PostUiOpenwindowNewmailNewMail.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this PostUiOpenwindowNewmailNewMail.
        body string

        :param body: The body of this PostUiOpenwindowNewmailNewMail.
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")
        if body is not None and len(body) > 10000:
            raise ValueError("Invalid value for `body`, length must be less than or equal to `10000`")

        self._body = body

    @property
    def recipients(self):
        """
        Gets the recipients of this PostUiOpenwindowNewmailNewMail.
        recipients array

        :return: The recipients of this PostUiOpenwindowNewmailNewMail.
        :rtype: list[int]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """
        Sets the recipients of this PostUiOpenwindowNewmailNewMail.
        recipients array

        :param recipients: The recipients of this PostUiOpenwindowNewmailNewMail.
        :type: list[int]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients

    @property
    def subject(self):
        """
        Gets the subject of this PostUiOpenwindowNewmailNewMail.
        subject string

        :return: The subject of this PostUiOpenwindowNewmailNewMail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this PostUiOpenwindowNewmailNewMail.
        subject string

        :param subject: The subject of this PostUiOpenwindowNewmailNewMail.
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")
        if subject is not None and len(subject) > 1000:
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `1000`")

        self._subject = subject

    @property
    def to_corp_or_alliance_id(self):
        """
        Gets the to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.
        to_corp_or_alliance_id integer

        :return: The to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.
        :rtype: int
        """
        return self._to_corp_or_alliance_id

    @to_corp_or_alliance_id.setter
    def to_corp_or_alliance_id(self, to_corp_or_alliance_id):
        """
        Sets the to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.
        to_corp_or_alliance_id integer

        :param to_corp_or_alliance_id: The to_corp_or_alliance_id of this PostUiOpenwindowNewmailNewMail.
        :type: int
        """

        self._to_corp_or_alliance_id = to_corp_or_alliance_id

    @property
    def to_mailing_list_id(self):
        """
        Gets the to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.
        Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field

        :return: The to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.
        :rtype: int
        """
        return self._to_mailing_list_id

    @to_mailing_list_id.setter
    def to_mailing_list_id(self, to_mailing_list_id):
        """
        Sets the to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.
        Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field

        :param to_mailing_list_id: The to_mailing_list_id of this PostUiOpenwindowNewmailNewMail.
        :type: int
        """

        self._to_mailing_list_id = to_mailing_list_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PostUiOpenwindowNewmailNewMail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
