# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdChatChannelsMuted(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, accessor_id=None, accessor_type=None, end_at=None, reason=None):
        """
        GetCharactersCharacterIdChatChannelsMuted - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accessor_id': 'int',
            'accessor_type': 'str',
            'end_at': 'datetime',
            'reason': 'str'
        }

        self.attribute_map = {
            'accessor_id': 'accessor_id',
            'accessor_type': 'accessor_type',
            'end_at': 'end_at',
            'reason': 'reason'
        }

        self._accessor_id = accessor_id
        self._accessor_type = accessor_type
        self._end_at = end_at
        self._reason = reason

    @property
    def accessor_id(self):
        """
        Gets the accessor_id of this GetCharactersCharacterIdChatChannelsMuted.
        ID of a muted channel member

        :return: The accessor_id of this GetCharactersCharacterIdChatChannelsMuted.
        :rtype: int
        """
        return self._accessor_id

    @accessor_id.setter
    def accessor_id(self, accessor_id):
        """
        Sets the accessor_id of this GetCharactersCharacterIdChatChannelsMuted.
        ID of a muted channel member

        :param accessor_id: The accessor_id of this GetCharactersCharacterIdChatChannelsMuted.
        :type: int
        """
        if accessor_id is None:
            raise ValueError("Invalid value for `accessor_id`, must not be `None`")

        self._accessor_id = accessor_id

    @property
    def accessor_type(self):
        """
        Gets the accessor_type of this GetCharactersCharacterIdChatChannelsMuted.
        accessor_type string

        :return: The accessor_type of this GetCharactersCharacterIdChatChannelsMuted.
        :rtype: str
        """
        return self._accessor_type

    @accessor_type.setter
    def accessor_type(self, accessor_type):
        """
        Sets the accessor_type of this GetCharactersCharacterIdChatChannelsMuted.
        accessor_type string

        :param accessor_type: The accessor_type of this GetCharactersCharacterIdChatChannelsMuted.
        :type: str
        """
        allowed_values = ["character", "corporation", "alliance"]
        if accessor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `accessor_type` ({0}), must be one of {1}"
                .format(accessor_type, allowed_values)
            )

        self._accessor_type = accessor_type

    @property
    def end_at(self):
        """
        Gets the end_at of this GetCharactersCharacterIdChatChannelsMuted.
        Time at which this accessor will no longer be muted

        :return: The end_at of this GetCharactersCharacterIdChatChannelsMuted.
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """
        Sets the end_at of this GetCharactersCharacterIdChatChannelsMuted.
        Time at which this accessor will no longer be muted

        :param end_at: The end_at of this GetCharactersCharacterIdChatChannelsMuted.
        :type: datetime
        """

        self._end_at = end_at

    @property
    def reason(self):
        """
        Gets the reason of this GetCharactersCharacterIdChatChannelsMuted.
        Reason this accessor is muted

        :return: The reason of this GetCharactersCharacterIdChatChannelsMuted.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this GetCharactersCharacterIdChatChannelsMuted.
        Reason this accessor is muted

        :param reason: The reason of this GetCharactersCharacterIdChatChannelsMuted.
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdChatChannelsMuted):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
