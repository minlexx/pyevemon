# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdPlanetsPlanetIdWaypoint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order=None, pin_id=None):
        """
        GetCharactersCharacterIdPlanetsPlanetIdWaypoint - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order': 'int',
            'pin_id': 'int'
        }

        self.attribute_map = {
            'order': 'order',
            'pin_id': 'pin_id'
        }

        self._order = order
        self._pin_id = pin_id

    @property
    def order(self):
        """
        Gets the order of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        order integer

        :return: The order of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        order integer

        :param order: The order of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        :type: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")
        if order is not None and order > 5:
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `5`")
        if order is not None and order < 1:
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `1`")

        self._order = order

    @property
    def pin_id(self):
        """
        Gets the pin_id of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        pin_id integer

        :return: The pin_id of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        :rtype: int
        """
        return self._pin_id

    @pin_id.setter
    def pin_id(self, pin_id):
        """
        Sets the pin_id of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        pin_id integer

        :param pin_id: The pin_id of this GetCharactersCharacterIdPlanetsPlanetIdWaypoint.
        :type: int
        """
        if pin_id is None:
            raise ValueError("Invalid value for `pin_id`, must not be `None`")

        self._pin_id = pin_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdPlanetsPlanetIdWaypoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
