# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdMedals200Ok(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, corporation_id=None, date=None, description=None, graphics=None, issuer_id=None, medal_id=None, reason=None, status=None, title=None):
        """
        GetCharactersCharacterIdMedals200Ok - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'corporation_id': 'int',
            'date': 'datetime',
            'description': 'str',
            'graphics': 'list[GetCharactersCharacterIdMedalsGraphic]',
            'issuer_id': 'int',
            'medal_id': 'int',
            'reason': 'str',
            'status': 'str',
            'title': 'str'
        }

        self.attribute_map = {
            'corporation_id': 'corporation_id',
            'date': 'date',
            'description': 'description',
            'graphics': 'graphics',
            'issuer_id': 'issuer_id',
            'medal_id': 'medal_id',
            'reason': 'reason',
            'status': 'status',
            'title': 'title'
        }

        self._corporation_id = corporation_id
        self._date = date
        self._description = description
        self._graphics = graphics
        self._issuer_id = issuer_id
        self._medal_id = medal_id
        self._reason = reason
        self._status = status
        self._title = title

    @property
    def corporation_id(self):
        """
        Gets the corporation_id of this GetCharactersCharacterIdMedals200Ok.
        corporation_id integer

        :return: The corporation_id of this GetCharactersCharacterIdMedals200Ok.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """
        Sets the corporation_id of this GetCharactersCharacterIdMedals200Ok.
        corporation_id integer

        :param corporation_id: The corporation_id of this GetCharactersCharacterIdMedals200Ok.
        :type: int
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")

        self._corporation_id = corporation_id

    @property
    def date(self):
        """
        Gets the date of this GetCharactersCharacterIdMedals200Ok.
        date string

        :return: The date of this GetCharactersCharacterIdMedals200Ok.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this GetCharactersCharacterIdMedals200Ok.
        date string

        :param date: The date of this GetCharactersCharacterIdMedals200Ok.
        :type: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def description(self):
        """
        Gets the description of this GetCharactersCharacterIdMedals200Ok.
        description string

        :return: The description of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GetCharactersCharacterIdMedals200Ok.
        description string

        :param description: The description of this GetCharactersCharacterIdMedals200Ok.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def graphics(self):
        """
        Gets the graphics of this GetCharactersCharacterIdMedals200Ok.
        graphics array

        :return: The graphics of this GetCharactersCharacterIdMedals200Ok.
        :rtype: list[GetCharactersCharacterIdMedalsGraphic]
        """
        return self._graphics

    @graphics.setter
    def graphics(self, graphics):
        """
        Sets the graphics of this GetCharactersCharacterIdMedals200Ok.
        graphics array

        :param graphics: The graphics of this GetCharactersCharacterIdMedals200Ok.
        :type: list[GetCharactersCharacterIdMedalsGraphic]
        """
        if graphics is None:
            raise ValueError("Invalid value for `graphics`, must not be `None`")

        self._graphics = graphics

    @property
    def issuer_id(self):
        """
        Gets the issuer_id of this GetCharactersCharacterIdMedals200Ok.
        issuer_id integer

        :return: The issuer_id of this GetCharactersCharacterIdMedals200Ok.
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """
        Sets the issuer_id of this GetCharactersCharacterIdMedals200Ok.
        issuer_id integer

        :param issuer_id: The issuer_id of this GetCharactersCharacterIdMedals200Ok.
        :type: int
        """
        if issuer_id is None:
            raise ValueError("Invalid value for `issuer_id`, must not be `None`")

        self._issuer_id = issuer_id

    @property
    def medal_id(self):
        """
        Gets the medal_id of this GetCharactersCharacterIdMedals200Ok.
        medal_id integer

        :return: The medal_id of this GetCharactersCharacterIdMedals200Ok.
        :rtype: int
        """
        return self._medal_id

    @medal_id.setter
    def medal_id(self, medal_id):
        """
        Sets the medal_id of this GetCharactersCharacterIdMedals200Ok.
        medal_id integer

        :param medal_id: The medal_id of this GetCharactersCharacterIdMedals200Ok.
        :type: int
        """
        if medal_id is None:
            raise ValueError("Invalid value for `medal_id`, must not be `None`")

        self._medal_id = medal_id

    @property
    def reason(self):
        """
        Gets the reason of this GetCharactersCharacterIdMedals200Ok.
        reason string

        :return: The reason of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this GetCharactersCharacterIdMedals200Ok.
        reason string

        :param reason: The reason of this GetCharactersCharacterIdMedals200Ok.
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def status(self):
        """
        Gets the status of this GetCharactersCharacterIdMedals200Ok.
        status string

        :return: The status of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GetCharactersCharacterIdMedals200Ok.
        status string

        :param status: The status of this GetCharactersCharacterIdMedals200Ok.
        :type: str
        """
        allowed_values = ["public", "private"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """
        Gets the title of this GetCharactersCharacterIdMedals200Ok.
        title string

        :return: The title of this GetCharactersCharacterIdMedals200Ok.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this GetCharactersCharacterIdMedals200Ok.
        title string

        :param title: The title of this GetCharactersCharacterIdMedals200Ok.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdMedals200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
