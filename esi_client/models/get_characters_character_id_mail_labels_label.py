# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdMailLabelsLabel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, color='#ffffff', label_id=None, name=None, unread_count=None):
        """
        GetCharactersCharacterIdMailLabelsLabel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'color': 'str',
            'label_id': 'int',
            'name': 'str',
            'unread_count': 'int'
        }

        self.attribute_map = {
            'color': 'color',
            'label_id': 'label_id',
            'name': 'name',
            'unread_count': 'unread_count'
        }

        self._color = color
        self._label_id = label_id
        self._name = name
        self._unread_count = unread_count

    @property
    def color(self):
        """
        Gets the color of this GetCharactersCharacterIdMailLabelsLabel.
        color string

        :return: The color of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this GetCharactersCharacterIdMailLabelsLabel.
        color string

        :param color: The color of this GetCharactersCharacterIdMailLabelsLabel.
        :type: str
        """
        allowed_values = ["#ffffff", "#ffff01", "#ff6600", "#fe0000", "#9a0000", "#660066", "#0000fe", "#0099ff", "#01ffff", "#00ff33", "#349800", "#006634", "#666666", "#999999", "#e6e6e6", "#ffffcd", "#99ffff", "#ccff9a"]
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def label_id(self):
        """
        Gets the label_id of this GetCharactersCharacterIdMailLabelsLabel.
        label_id integer

        :return: The label_id of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: int
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """
        Sets the label_id of this GetCharactersCharacterIdMailLabelsLabel.
        label_id integer

        :param label_id: The label_id of this GetCharactersCharacterIdMailLabelsLabel.
        :type: int
        """
        if label_id is not None and label_id < 0:
            raise ValueError("Invalid value for `label_id`, must be a value greater than or equal to `0`")

        self._label_id = label_id

    @property
    def name(self):
        """
        Gets the name of this GetCharactersCharacterIdMailLabelsLabel.
        name string

        :return: The name of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetCharactersCharacterIdMailLabelsLabel.
        name string

        :param name: The name of this GetCharactersCharacterIdMailLabelsLabel.
        :type: str
        """
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")

        self._name = name

    @property
    def unread_count(self):
        """
        Gets the unread_count of this GetCharactersCharacterIdMailLabelsLabel.
        unread_count integer

        :return: The unread_count of this GetCharactersCharacterIdMailLabelsLabel.
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """
        Sets the unread_count of this GetCharactersCharacterIdMailLabelsLabel.
        unread_count integer

        :param unread_count: The unread_count of this GetCharactersCharacterIdMailLabelsLabel.
        :type: int
        """
        if unread_count is not None and unread_count < 0:
            raise ValueError("Invalid value for `unread_count`, must be a value greater than or equal to `0`")

        self._unread_count = unread_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdMailLabelsLabel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
