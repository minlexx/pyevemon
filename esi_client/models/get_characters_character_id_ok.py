# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdOk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alliance_id=None, ancestry_id=None, birthday=None, bloodline_id=None, corporation_id=None, description=None, gender=None, name=None, race_id=None, security_status=None):
        """
        GetCharactersCharacterIdOk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alliance_id': 'int',
            'ancestry_id': 'int',
            'birthday': 'datetime',
            'bloodline_id': 'int',
            'corporation_id': 'int',
            'description': 'str',
            'gender': 'str',
            'name': 'str',
            'race_id': 'int',
            'security_status': 'float'
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'ancestry_id': 'ancestry_id',
            'birthday': 'birthday',
            'bloodline_id': 'bloodline_id',
            'corporation_id': 'corporation_id',
            'description': 'description',
            'gender': 'gender',
            'name': 'name',
            'race_id': 'race_id',
            'security_status': 'security_status'
        }

        self._alliance_id = alliance_id
        self._ancestry_id = ancestry_id
        self._birthday = birthday
        self._bloodline_id = bloodline_id
        self._corporation_id = corporation_id
        self._description = description
        self._gender = gender
        self._name = name
        self._race_id = race_id
        self._security_status = security_status

    @property
    def alliance_id(self):
        """
        Gets the alliance_id of this GetCharactersCharacterIdOk.
        The character's alliance ID

        :return: The alliance_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """
        Sets the alliance_id of this GetCharactersCharacterIdOk.
        The character's alliance ID

        :param alliance_id: The alliance_id of this GetCharactersCharacterIdOk.
        :type: int
        """

        self._alliance_id = alliance_id

    @property
    def ancestry_id(self):
        """
        Gets the ancestry_id of this GetCharactersCharacterIdOk.
        ancestry_id integer

        :return: The ancestry_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._ancestry_id

    @ancestry_id.setter
    def ancestry_id(self, ancestry_id):
        """
        Sets the ancestry_id of this GetCharactersCharacterIdOk.
        ancestry_id integer

        :param ancestry_id: The ancestry_id of this GetCharactersCharacterIdOk.
        :type: int
        """

        self._ancestry_id = ancestry_id

    @property
    def birthday(self):
        """
        Gets the birthday of this GetCharactersCharacterIdOk.
        Creation date of the character

        :return: The birthday of this GetCharactersCharacterIdOk.
        :rtype: datetime
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """
        Sets the birthday of this GetCharactersCharacterIdOk.
        Creation date of the character

        :param birthday: The birthday of this GetCharactersCharacterIdOk.
        :type: datetime
        """
        if birthday is None:
            raise ValueError("Invalid value for `birthday`, must not be `None`")

        self._birthday = birthday

    @property
    def bloodline_id(self):
        """
        Gets the bloodline_id of this GetCharactersCharacterIdOk.
        bloodline_id integer

        :return: The bloodline_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._bloodline_id

    @bloodline_id.setter
    def bloodline_id(self, bloodline_id):
        """
        Sets the bloodline_id of this GetCharactersCharacterIdOk.
        bloodline_id integer

        :param bloodline_id: The bloodline_id of this GetCharactersCharacterIdOk.
        :type: int
        """
        if bloodline_id is None:
            raise ValueError("Invalid value for `bloodline_id`, must not be `None`")

        self._bloodline_id = bloodline_id

    @property
    def corporation_id(self):
        """
        Gets the corporation_id of this GetCharactersCharacterIdOk.
        The character's corporation ID

        :return: The corporation_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """
        Sets the corporation_id of this GetCharactersCharacterIdOk.
        The character's corporation ID

        :param corporation_id: The corporation_id of this GetCharactersCharacterIdOk.
        :type: int
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")

        self._corporation_id = corporation_id

    @property
    def description(self):
        """
        Gets the description of this GetCharactersCharacterIdOk.
        description string

        :return: The description of this GetCharactersCharacterIdOk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GetCharactersCharacterIdOk.
        description string

        :param description: The description of this GetCharactersCharacterIdOk.
        :type: str
        """

        self._description = description

    @property
    def gender(self):
        """
        Gets the gender of this GetCharactersCharacterIdOk.
        gender string

        :return: The gender of this GetCharactersCharacterIdOk.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this GetCharactersCharacterIdOk.
        gender string

        :param gender: The gender of this GetCharactersCharacterIdOk.
        :type: str
        """
        allowed_values = ["female", "male"]
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def name(self):
        """
        Gets the name of this GetCharactersCharacterIdOk.
        name string

        :return: The name of this GetCharactersCharacterIdOk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetCharactersCharacterIdOk.
        name string

        :param name: The name of this GetCharactersCharacterIdOk.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def race_id(self):
        """
        Gets the race_id of this GetCharactersCharacterIdOk.
        race_id integer

        :return: The race_id of this GetCharactersCharacterIdOk.
        :rtype: int
        """
        return self._race_id

    @race_id.setter
    def race_id(self, race_id):
        """
        Sets the race_id of this GetCharactersCharacterIdOk.
        race_id integer

        :param race_id: The race_id of this GetCharactersCharacterIdOk.
        :type: int
        """
        if race_id is None:
            raise ValueError("Invalid value for `race_id`, must not be `None`")

        self._race_id = race_id

    @property
    def security_status(self):
        """
        Gets the security_status of this GetCharactersCharacterIdOk.
        security_status number

        :return: The security_status of this GetCharactersCharacterIdOk.
        :rtype: float
        """
        return self._security_status

    @security_status.setter
    def security_status(self, security_status):
        """
        Sets the security_status of this GetCharactersCharacterIdOk.
        security_status number

        :param security_status: The security_status of this GetCharactersCharacterIdOk.
        :type: float
        """
        if security_status is not None and security_status > 10:
            raise ValueError("Invalid value for `security_status`, must be a value less than or equal to `10`")
        if security_status is not None and security_status < -10:
            raise ValueError("Invalid value for `security_status`, must be a value greater than or equal to `-10`")

        self._security_status = security_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
