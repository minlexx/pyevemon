# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetAlliancesAllianceIdOk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alliance_name=None, date_founded=None, executor_corp=None, ticker=None):
        """
        GetAlliancesAllianceIdOk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alliance_name': 'str',
            'date_founded': 'datetime',
            'executor_corp': 'int',
            'ticker': 'str'
        }

        self.attribute_map = {
            'alliance_name': 'alliance_name',
            'date_founded': 'date_founded',
            'executor_corp': 'executor_corp',
            'ticker': 'ticker'
        }

        self._alliance_name = alliance_name
        self._date_founded = date_founded
        self._executor_corp = executor_corp
        self._ticker = ticker

    @property
    def alliance_name(self):
        """
        Gets the alliance_name of this GetAlliancesAllianceIdOk.
        the full name of the alliance

        :return: The alliance_name of this GetAlliancesAllianceIdOk.
        :rtype: str
        """
        return self._alliance_name

    @alliance_name.setter
    def alliance_name(self, alliance_name):
        """
        Sets the alliance_name of this GetAlliancesAllianceIdOk.
        the full name of the alliance

        :param alliance_name: The alliance_name of this GetAlliancesAllianceIdOk.
        :type: str
        """
        if alliance_name is None:
            raise ValueError("Invalid value for `alliance_name`, must not be `None`")

        self._alliance_name = alliance_name

    @property
    def date_founded(self):
        """
        Gets the date_founded of this GetAlliancesAllianceIdOk.
        date_founded string

        :return: The date_founded of this GetAlliancesAllianceIdOk.
        :rtype: datetime
        """
        return self._date_founded

    @date_founded.setter
    def date_founded(self, date_founded):
        """
        Sets the date_founded of this GetAlliancesAllianceIdOk.
        date_founded string

        :param date_founded: The date_founded of this GetAlliancesAllianceIdOk.
        :type: datetime
        """
        if date_founded is None:
            raise ValueError("Invalid value for `date_founded`, must not be `None`")

        self._date_founded = date_founded

    @property
    def executor_corp(self):
        """
        Gets the executor_corp of this GetAlliancesAllianceIdOk.
        the executor corporation ID, if this alliance is not closed

        :return: The executor_corp of this GetAlliancesAllianceIdOk.
        :rtype: int
        """
        return self._executor_corp

    @executor_corp.setter
    def executor_corp(self, executor_corp):
        """
        Sets the executor_corp of this GetAlliancesAllianceIdOk.
        the executor corporation ID, if this alliance is not closed

        :param executor_corp: The executor_corp of this GetAlliancesAllianceIdOk.
        :type: int
        """

        self._executor_corp = executor_corp

    @property
    def ticker(self):
        """
        Gets the ticker of this GetAlliancesAllianceIdOk.
        the short name of the alliance

        :return: The ticker of this GetAlliancesAllianceIdOk.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """
        Sets the ticker of this GetAlliancesAllianceIdOk.
        the short name of the alliance

        :param ticker: The ticker of this GetAlliancesAllianceIdOk.
        :type: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")

        self._ticker = ticker

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetAlliancesAllianceIdOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
