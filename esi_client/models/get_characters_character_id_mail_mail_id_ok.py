# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdMailMailIdOk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, body=None, _from=None, labels=None, read=None, recipients=None, subject=None, timestamp=None):
        """
        GetCharactersCharacterIdMailMailIdOk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'body': 'str',
            '_from': 'int',
            'labels': 'list[int]',
            'read': 'bool',
            'recipients': 'list[GetCharactersCharacterIdMailMailIdRecipient]',
            'subject': 'str',
            'timestamp': 'datetime'
        }

        self.attribute_map = {
            'body': 'body',
            '_from': 'from',
            'labels': 'labels',
            'read': 'read',
            'recipients': 'recipients',
            'subject': 'subject',
            'timestamp': 'timestamp'
        }

        self._body = body
        self.__from = _from
        self._labels = labels
        self._read = read
        self._recipients = recipients
        self._subject = subject
        self._timestamp = timestamp

    @property
    def body(self):
        """
        Gets the body of this GetCharactersCharacterIdMailMailIdOk.
        Mail's body

        :return: The body of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this GetCharactersCharacterIdMailMailIdOk.
        Mail's body

        :param body: The body of this GetCharactersCharacterIdMailMailIdOk.
        :type: str
        """

        self._body = body

    @property
    def _from(self):
        """
        Gets the _from of this GetCharactersCharacterIdMailMailIdOk.
        From whom the mail was sent

        :return: The _from of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this GetCharactersCharacterIdMailMailIdOk.
        From whom the mail was sent

        :param _from: The _from of this GetCharactersCharacterIdMailMailIdOk.
        :type: int
        """

        self.__from = _from

    @property
    def labels(self):
        """
        Gets the labels of this GetCharactersCharacterIdMailMailIdOk.
        Labels attached to the mail

        :return: The labels of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: list[int]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this GetCharactersCharacterIdMailMailIdOk.
        Labels attached to the mail

        :param labels: The labels of this GetCharactersCharacterIdMailMailIdOk.
        :type: list[int]
        """

        self._labels = labels

    @property
    def read(self):
        """
        Gets the read of this GetCharactersCharacterIdMailMailIdOk.
        Whether the mail is flagged as read

        :return: The read of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """
        Sets the read of this GetCharactersCharacterIdMailMailIdOk.
        Whether the mail is flagged as read

        :param read: The read of this GetCharactersCharacterIdMailMailIdOk.
        :type: bool
        """

        self._read = read

    @property
    def recipients(self):
        """
        Gets the recipients of this GetCharactersCharacterIdMailMailIdOk.
        Recipients of the mail

        :return: The recipients of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: list[GetCharactersCharacterIdMailMailIdRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """
        Sets the recipients of this GetCharactersCharacterIdMailMailIdOk.
        Recipients of the mail

        :param recipients: The recipients of this GetCharactersCharacterIdMailMailIdOk.
        :type: list[GetCharactersCharacterIdMailMailIdRecipient]
        """

        self._recipients = recipients

    @property
    def subject(self):
        """
        Gets the subject of this GetCharactersCharacterIdMailMailIdOk.
        Mail subject

        :return: The subject of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this GetCharactersCharacterIdMailMailIdOk.
        Mail subject

        :param subject: The subject of this GetCharactersCharacterIdMailMailIdOk.
        :type: str
        """

        self._subject = subject

    @property
    def timestamp(self):
        """
        Gets the timestamp of this GetCharactersCharacterIdMailMailIdOk.
        When the mail was sent

        :return: The timestamp of this GetCharactersCharacterIdMailMailIdOk.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this GetCharactersCharacterIdMailMailIdOk.
        When the mail was sent

        :param timestamp: The timestamp of this GetCharactersCharacterIdMailMailIdOk.
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdMailMailIdOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
