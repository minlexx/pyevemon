# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetCharactersCharacterIdOrders200Ok(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, duration=None, escrow=None, is_buy_order=None, is_corp=None, issued=None, location_id=None, min_volume=None, order_id=None, price=None, range=None, region_id=None, state=None, type_id=None, volume_remain=None, volume_total=None):
        """
        GetCharactersCharacterIdOrders200Ok - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'int',
            'duration': 'int',
            'escrow': 'float',
            'is_buy_order': 'bool',
            'is_corp': 'bool',
            'issued': 'datetime',
            'location_id': 'int',
            'min_volume': 'int',
            'order_id': 'int',
            'price': 'float',
            'range': 'str',
            'region_id': 'int',
            'state': 'str',
            'type_id': 'int',
            'volume_remain': 'int',
            'volume_total': 'int'
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'duration': 'duration',
            'escrow': 'escrow',
            'is_buy_order': 'is_buy_order',
            'is_corp': 'is_corp',
            'issued': 'issued',
            'location_id': 'location_id',
            'min_volume': 'min_volume',
            'order_id': 'order_id',
            'price': 'price',
            'range': 'range',
            'region_id': 'region_id',
            'state': 'state',
            'type_id': 'type_id',
            'volume_remain': 'volume_remain',
            'volume_total': 'volume_total'
        }

        self._account_id = account_id
        self._duration = duration
        self._escrow = escrow
        self._is_buy_order = is_buy_order
        self._is_corp = is_corp
        self._issued = issued
        self._location_id = location_id
        self._min_volume = min_volume
        self._order_id = order_id
        self._price = price
        self._range = range
        self._region_id = region_id
        self._state = state
        self._type_id = type_id
        self._volume_remain = volume_remain
        self._volume_total = volume_total

    @property
    def account_id(self):
        """
        Gets the account_id of this GetCharactersCharacterIdOrders200Ok.
        Wallet division for the buyer or seller of this order. Always 1000 for characters. Currently 1000 through 1006 for corporations

        :return: The account_id of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this GetCharactersCharacterIdOrders200Ok.
        Wallet division for the buyer or seller of this order. Always 1000 for characters. Currently 1000 through 1006 for corporations

        :param account_id: The account_id of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def duration(self):
        """
        Gets the duration of this GetCharactersCharacterIdOrders200Ok.
        Numer of days for which order is valid (starting from the issued date). An order expires at time issued + duration

        :return: The duration of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this GetCharactersCharacterIdOrders200Ok.
        Numer of days for which order is valid (starting from the issued date). An order expires at time issued + duration

        :param duration: The duration of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def escrow(self):
        """
        Gets the escrow of this GetCharactersCharacterIdOrders200Ok.
        For buy orders, the amount of ISK in escrow

        :return: The escrow of this GetCharactersCharacterIdOrders200Ok.
        :rtype: float
        """
        return self._escrow

    @escrow.setter
    def escrow(self, escrow):
        """
        Sets the escrow of this GetCharactersCharacterIdOrders200Ok.
        For buy orders, the amount of ISK in escrow

        :param escrow: The escrow of this GetCharactersCharacterIdOrders200Ok.
        :type: float
        """
        if escrow is None:
            raise ValueError("Invalid value for `escrow`, must not be `None`")

        self._escrow = escrow

    @property
    def is_buy_order(self):
        """
        Gets the is_buy_order of this GetCharactersCharacterIdOrders200Ok.
        True for a bid (buy) order. False for an offer (sell) order

        :return: The is_buy_order of this GetCharactersCharacterIdOrders200Ok.
        :rtype: bool
        """
        return self._is_buy_order

    @is_buy_order.setter
    def is_buy_order(self, is_buy_order):
        """
        Sets the is_buy_order of this GetCharactersCharacterIdOrders200Ok.
        True for a bid (buy) order. False for an offer (sell) order

        :param is_buy_order: The is_buy_order of this GetCharactersCharacterIdOrders200Ok.
        :type: bool
        """
        if is_buy_order is None:
            raise ValueError("Invalid value for `is_buy_order`, must not be `None`")

        self._is_buy_order = is_buy_order

    @property
    def is_corp(self):
        """
        Gets the is_corp of this GetCharactersCharacterIdOrders200Ok.
        is_corp boolean

        :return: The is_corp of this GetCharactersCharacterIdOrders200Ok.
        :rtype: bool
        """
        return self._is_corp

    @is_corp.setter
    def is_corp(self, is_corp):
        """
        Sets the is_corp of this GetCharactersCharacterIdOrders200Ok.
        is_corp boolean

        :param is_corp: The is_corp of this GetCharactersCharacterIdOrders200Ok.
        :type: bool
        """
        if is_corp is None:
            raise ValueError("Invalid value for `is_corp`, must not be `None`")

        self._is_corp = is_corp

    @property
    def issued(self):
        """
        Gets the issued of this GetCharactersCharacterIdOrders200Ok.
        Date and time when this order was issued

        :return: The issued of this GetCharactersCharacterIdOrders200Ok.
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """
        Sets the issued of this GetCharactersCharacterIdOrders200Ok.
        Date and time when this order was issued

        :param issued: The issued of this GetCharactersCharacterIdOrders200Ok.
        :type: datetime
        """
        if issued is None:
            raise ValueError("Invalid value for `issued`, must not be `None`")

        self._issued = issued

    @property
    def location_id(self):
        """
        Gets the location_id of this GetCharactersCharacterIdOrders200Ok.
        ID of the location where order was placed

        :return: The location_id of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """
        Sets the location_id of this GetCharactersCharacterIdOrders200Ok.
        ID of the location where order was placed

        :param location_id: The location_id of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def min_volume(self):
        """
        Gets the min_volume of this GetCharactersCharacterIdOrders200Ok.
        For bids (buy orders), the minimum quantity that will be accepted in a matching offer (sell order)

        :return: The min_volume of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._min_volume

    @min_volume.setter
    def min_volume(self, min_volume):
        """
        Sets the min_volume of this GetCharactersCharacterIdOrders200Ok.
        For bids (buy orders), the minimum quantity that will be accepted in a matching offer (sell order)

        :param min_volume: The min_volume of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if min_volume is None:
            raise ValueError("Invalid value for `min_volume`, must not be `None`")

        self._min_volume = min_volume

    @property
    def order_id(self):
        """
        Gets the order_id of this GetCharactersCharacterIdOrders200Ok.
        Unique order ID

        :return: The order_id of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this GetCharactersCharacterIdOrders200Ok.
        Unique order ID

        :param order_id: The order_id of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def price(self):
        """
        Gets the price of this GetCharactersCharacterIdOrders200Ok.
        Cost per unit for this order

        :return: The price of this GetCharactersCharacterIdOrders200Ok.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this GetCharactersCharacterIdOrders200Ok.
        Cost per unit for this order

        :param price: The price of this GetCharactersCharacterIdOrders200Ok.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def range(self):
        """
        Gets the range of this GetCharactersCharacterIdOrders200Ok.
        Valid order range, numbers are ranges in jumps

        :return: The range of this GetCharactersCharacterIdOrders200Ok.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """
        Sets the range of this GetCharactersCharacterIdOrders200Ok.
        Valid order range, numbers are ranges in jumps

        :param range: The range of this GetCharactersCharacterIdOrders200Ok.
        :type: str
        """
        allowed_values = ["station", "region", "solarsystem", "1", "2", "3", "4", "5", "10", "20", "30", "40"]
        if range not in allowed_values:
            raise ValueError(
                "Invalid value for `range` ({0}), must be one of {1}"
                .format(range, allowed_values)
            )

        self._range = range

    @property
    def region_id(self):
        """
        Gets the region_id of this GetCharactersCharacterIdOrders200Ok.
        ID of the region where order was placed

        :return: The region_id of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """
        Sets the region_id of this GetCharactersCharacterIdOrders200Ok.
        ID of the region where order was placed

        :param region_id: The region_id of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def state(self):
        """
        Gets the state of this GetCharactersCharacterIdOrders200Ok.
        Current order state

        :return: The state of this GetCharactersCharacterIdOrders200Ok.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this GetCharactersCharacterIdOrders200Ok.
        Current order state

        :param state: The state of this GetCharactersCharacterIdOrders200Ok.
        :type: str
        """
        allowed_values = ["open", "closed", "expired", "cancelled", "pending", "character_deleted"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type_id(self):
        """
        Gets the type_id of this GetCharactersCharacterIdOrders200Ok.
        The type ID of the item transacted in this order

        :return: The type_id of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """
        Sets the type_id of this GetCharactersCharacterIdOrders200Ok.
        The type ID of the item transacted in this order

        :param type_id: The type_id of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id

    @property
    def volume_remain(self):
        """
        Gets the volume_remain of this GetCharactersCharacterIdOrders200Ok.
        Quantity of items still required or offered

        :return: The volume_remain of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._volume_remain

    @volume_remain.setter
    def volume_remain(self, volume_remain):
        """
        Sets the volume_remain of this GetCharactersCharacterIdOrders200Ok.
        Quantity of items still required or offered

        :param volume_remain: The volume_remain of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if volume_remain is None:
            raise ValueError("Invalid value for `volume_remain`, must not be `None`")

        self._volume_remain = volume_remain

    @property
    def volume_total(self):
        """
        Gets the volume_total of this GetCharactersCharacterIdOrders200Ok.
        Quantity of items required or offered at time order was placed

        :return: The volume_total of this GetCharactersCharacterIdOrders200Ok.
        :rtype: int
        """
        return self._volume_total

    @volume_total.setter
    def volume_total(self, volume_total):
        """
        Sets the volume_total of this GetCharactersCharacterIdOrders200Ok.
        Quantity of items required or offered at time order was placed

        :param volume_total: The volume_total of this GetCharactersCharacterIdOrders200Ok.
        :type: int
        """
        if volume_total is None:
            raise ValueError("Invalid value for `volume_total`, must not be `None`")

        self._volume_total = volume_total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetCharactersCharacterIdOrders200Ok):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
