# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetWarsWarIdOk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aggressor=None, allies=None, declared=None, defender=None, finished=None, id=None, mutual=None, open_for_allies=None, retracted=None, started=None):
        """
        GetWarsWarIdOk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aggressor': 'GetWarsWarIdAggressor',
            'allies': 'list[GetWarsWarIdAlly]',
            'declared': 'datetime',
            'defender': 'GetWarsWarIdDefender',
            'finished': 'datetime',
            'id': 'int',
            'mutual': 'bool',
            'open_for_allies': 'bool',
            'retracted': 'datetime',
            'started': 'datetime'
        }

        self.attribute_map = {
            'aggressor': 'aggressor',
            'allies': 'allies',
            'declared': 'declared',
            'defender': 'defender',
            'finished': 'finished',
            'id': 'id',
            'mutual': 'mutual',
            'open_for_allies': 'open_for_allies',
            'retracted': 'retracted',
            'started': 'started'
        }

        self._aggressor = aggressor
        self._allies = allies
        self._declared = declared
        self._defender = defender
        self._finished = finished
        self._id = id
        self._mutual = mutual
        self._open_for_allies = open_for_allies
        self._retracted = retracted
        self._started = started

    @property
    def aggressor(self):
        """
        Gets the aggressor of this GetWarsWarIdOk.

        :return: The aggressor of this GetWarsWarIdOk.
        :rtype: GetWarsWarIdAggressor
        """
        return self._aggressor

    @aggressor.setter
    def aggressor(self, aggressor):
        """
        Sets the aggressor of this GetWarsWarIdOk.

        :param aggressor: The aggressor of this GetWarsWarIdOk.
        :type: GetWarsWarIdAggressor
        """

        self._aggressor = aggressor

    @property
    def allies(self):
        """
        Gets the allies of this GetWarsWarIdOk.
        allied corporations or alliances, each object contains either corporation_id or alliance_id

        :return: The allies of this GetWarsWarIdOk.
        :rtype: list[GetWarsWarIdAlly]
        """
        return self._allies

    @allies.setter
    def allies(self, allies):
        """
        Sets the allies of this GetWarsWarIdOk.
        allied corporations or alliances, each object contains either corporation_id or alliance_id

        :param allies: The allies of this GetWarsWarIdOk.
        :type: list[GetWarsWarIdAlly]
        """

        self._allies = allies

    @property
    def declared(self):
        """
        Gets the declared of this GetWarsWarIdOk.
        Time that the war was declared

        :return: The declared of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._declared

    @declared.setter
    def declared(self, declared):
        """
        Sets the declared of this GetWarsWarIdOk.
        Time that the war was declared

        :param declared: The declared of this GetWarsWarIdOk.
        :type: datetime
        """
        if declared is None:
            raise ValueError("Invalid value for `declared`, must not be `None`")

        self._declared = declared

    @property
    def defender(self):
        """
        Gets the defender of this GetWarsWarIdOk.

        :return: The defender of this GetWarsWarIdOk.
        :rtype: GetWarsWarIdDefender
        """
        return self._defender

    @defender.setter
    def defender(self, defender):
        """
        Sets the defender of this GetWarsWarIdOk.

        :param defender: The defender of this GetWarsWarIdOk.
        :type: GetWarsWarIdDefender
        """

        self._defender = defender

    @property
    def finished(self):
        """
        Gets the finished of this GetWarsWarIdOk.
        Time the war ended and shooting was no longer allowed

        :return: The finished of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """
        Sets the finished of this GetWarsWarIdOk.
        Time the war ended and shooting was no longer allowed

        :param finished: The finished of this GetWarsWarIdOk.
        :type: datetime
        """

        self._finished = finished

    @property
    def id(self):
        """
        Gets the id of this GetWarsWarIdOk.
        ID of the specified war

        :return: The id of this GetWarsWarIdOk.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetWarsWarIdOk.
        ID of the specified war

        :param id: The id of this GetWarsWarIdOk.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mutual(self):
        """
        Gets the mutual of this GetWarsWarIdOk.
        Was the war declared mutual by both parties

        :return: The mutual of this GetWarsWarIdOk.
        :rtype: bool
        """
        return self._mutual

    @mutual.setter
    def mutual(self, mutual):
        """
        Sets the mutual of this GetWarsWarIdOk.
        Was the war declared mutual by both parties

        :param mutual: The mutual of this GetWarsWarIdOk.
        :type: bool
        """
        if mutual is None:
            raise ValueError("Invalid value for `mutual`, must not be `None`")

        self._mutual = mutual

    @property
    def open_for_allies(self):
        """
        Gets the open_for_allies of this GetWarsWarIdOk.
        Is the war currently open for allies or not

        :return: The open_for_allies of this GetWarsWarIdOk.
        :rtype: bool
        """
        return self._open_for_allies

    @open_for_allies.setter
    def open_for_allies(self, open_for_allies):
        """
        Sets the open_for_allies of this GetWarsWarIdOk.
        Is the war currently open for allies or not

        :param open_for_allies: The open_for_allies of this GetWarsWarIdOk.
        :type: bool
        """
        if open_for_allies is None:
            raise ValueError("Invalid value for `open_for_allies`, must not be `None`")

        self._open_for_allies = open_for_allies

    @property
    def retracted(self):
        """
        Gets the retracted of this GetWarsWarIdOk.
        Time the war was retracted but both sides could still shoot each other

        :return: The retracted of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._retracted

    @retracted.setter
    def retracted(self, retracted):
        """
        Sets the retracted of this GetWarsWarIdOk.
        Time the war was retracted but both sides could still shoot each other

        :param retracted: The retracted of this GetWarsWarIdOk.
        :type: datetime
        """

        self._retracted = retracted

    @property
    def started(self):
        """
        Gets the started of this GetWarsWarIdOk.
        Time when the war started and both sides could shoot each other

        :return: The started of this GetWarsWarIdOk.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """
        Sets the started of this GetWarsWarIdOk.
        Time when the war started and both sides could shoot each other

        :param started: The started of this GetWarsWarIdOk.
        :type: datetime
        """

        self._started = started

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetWarsWarIdOk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
