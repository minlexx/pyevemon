# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetKillmailsKillmailIdKillmailHashAttacker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alliance_id=None, character_id=None, corporation_id=None, damage_done=None, faction_id=None, final_blow=None, security_status=None, ship_type_id=None, weapon_type_id=None):
        """
        GetKillmailsKillmailIdKillmailHashAttacker - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alliance_id': 'int',
            'character_id': 'int',
            'corporation_id': 'int',
            'damage_done': 'int',
            'faction_id': 'int',
            'final_blow': 'bool',
            'security_status': 'float',
            'ship_type_id': 'int',
            'weapon_type_id': 'int'
        }

        self.attribute_map = {
            'alliance_id': 'alliance_id',
            'character_id': 'character_id',
            'corporation_id': 'corporation_id',
            'damage_done': 'damage_done',
            'faction_id': 'faction_id',
            'final_blow': 'final_blow',
            'security_status': 'security_status',
            'ship_type_id': 'ship_type_id',
            'weapon_type_id': 'weapon_type_id'
        }

        self._alliance_id = alliance_id
        self._character_id = character_id
        self._corporation_id = corporation_id
        self._damage_done = damage_done
        self._faction_id = faction_id
        self._final_blow = final_blow
        self._security_status = security_status
        self._ship_type_id = ship_type_id
        self._weapon_type_id = weapon_type_id

    @property
    def alliance_id(self):
        """
        Gets the alliance_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        alliance_id integer

        :return: The alliance_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """
        Sets the alliance_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        alliance_id integer

        :param alliance_id: The alliance_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: int
        """

        self._alliance_id = alliance_id

    @property
    def character_id(self):
        """
        Gets the character_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        character_id integer

        :return: The character_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """
        Sets the character_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        character_id integer

        :param character_id: The character_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: int
        """

        self._character_id = character_id

    @property
    def corporation_id(self):
        """
        Gets the corporation_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        corporation_id integer

        :return: The corporation_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: int
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """
        Sets the corporation_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        corporation_id integer

        :param corporation_id: The corporation_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: int
        """

        self._corporation_id = corporation_id

    @property
    def damage_done(self):
        """
        Gets the damage_done of this GetKillmailsKillmailIdKillmailHashAttacker.
        damage_done integer

        :return: The damage_done of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: int
        """
        return self._damage_done

    @damage_done.setter
    def damage_done(self, damage_done):
        """
        Sets the damage_done of this GetKillmailsKillmailIdKillmailHashAttacker.
        damage_done integer

        :param damage_done: The damage_done of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: int
        """
        if damage_done is None:
            raise ValueError("Invalid value for `damage_done`, must not be `None`")

        self._damage_done = damage_done

    @property
    def faction_id(self):
        """
        Gets the faction_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        faction_id integer

        :return: The faction_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """
        Sets the faction_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        faction_id integer

        :param faction_id: The faction_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: int
        """

        self._faction_id = faction_id

    @property
    def final_blow(self):
        """
        Gets the final_blow of this GetKillmailsKillmailIdKillmailHashAttacker.
        Was the attacker the one to achieve the final blow 

        :return: The final_blow of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: bool
        """
        return self._final_blow

    @final_blow.setter
    def final_blow(self, final_blow):
        """
        Sets the final_blow of this GetKillmailsKillmailIdKillmailHashAttacker.
        Was the attacker the one to achieve the final blow 

        :param final_blow: The final_blow of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: bool
        """
        if final_blow is None:
            raise ValueError("Invalid value for `final_blow`, must not be `None`")

        self._final_blow = final_blow

    @property
    def security_status(self):
        """
        Gets the security_status of this GetKillmailsKillmailIdKillmailHashAttacker.
        Security status for the attacker 

        :return: The security_status of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: float
        """
        return self._security_status

    @security_status.setter
    def security_status(self, security_status):
        """
        Sets the security_status of this GetKillmailsKillmailIdKillmailHashAttacker.
        Security status for the attacker 

        :param security_status: The security_status of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: float
        """
        if security_status is None:
            raise ValueError("Invalid value for `security_status`, must not be `None`")

        self._security_status = security_status

    @property
    def ship_type_id(self):
        """
        Gets the ship_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        What ship was the attacker flying 

        :return: The ship_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: int
        """
        return self._ship_type_id

    @ship_type_id.setter
    def ship_type_id(self, ship_type_id):
        """
        Sets the ship_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        What ship was the attacker flying 

        :param ship_type_id: The ship_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: int
        """

        self._ship_type_id = ship_type_id

    @property
    def weapon_type_id(self):
        """
        Gets the weapon_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        What weapon was used by the attacker for the kill 

        :return: The weapon_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :rtype: int
        """
        return self._weapon_type_id

    @weapon_type_id.setter
    def weapon_type_id(self, weapon_type_id):
        """
        Sets the weapon_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        What weapon was used by the attacker for the kill 

        :param weapon_type_id: The weapon_type_id of this GetKillmailsKillmailIdKillmailHashAttacker.
        :type: int
        """

        self._weapon_type_id = weapon_type_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetKillmailsKillmailIdKillmailHashAttacker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
