# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PutCorporationsCorporationIdStructuresStructureIdNewSchedule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, day=None, hour=None):
        """
        PutCorporationsCorporationIdStructuresStructureIdNewSchedule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'day': 'int',
            'hour': 'int'
        }

        self.attribute_map = {
            'day': 'day',
            'hour': 'hour'
        }

        self._day = day
        self._hour = hour

    @property
    def day(self):
        """
        Gets the day of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        Day of the week, zero-indexed to Monday

        :return: The day of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """
        Sets the day of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        Day of the week, zero-indexed to Monday

        :param day: The day of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        :type: int
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")
        if day is not None and day > 6:
            raise ValueError("Invalid value for `day`, must be a value less than or equal to `6`")
        if day is not None and day < 0:
            raise ValueError("Invalid value for `day`, must be a value greater than or equal to `0`")

        self._day = day

    @property
    def hour(self):
        """
        Gets the hour of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        Hour of the day evetime, zero-indexed to midnight

        :return: The hour of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """
        Sets the hour of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        Hour of the day evetime, zero-indexed to midnight

        :param hour: The hour of this PutCorporationsCorporationIdStructuresStructureIdNewSchedule.
        :type: int
        """
        if hour is None:
            raise ValueError("Invalid value for `hour`, must not be `None`")
        if hour is not None and hour > 23:
            raise ValueError("Invalid value for `hour`, must be a value less than or equal to `23`")
        if hour is not None and hour < 0:
            raise ValueError("Invalid value for `hour`, must be a value greater than or equal to `0`")

        self._hour = hour

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PutCorporationsCorporationIdStructuresStructureIdNewSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
