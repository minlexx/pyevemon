# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FleetsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_fleets_fleet_id_members_member_id(self, fleet_id, member_id, **kwargs):
        """
        Kick fleet member
        Kick a fleet member  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fleets_fleet_id_members_member_id(fleet_id, member_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, **kwargs)
        else:
            (data) = self.delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, **kwargs)
            return data

    def delete_fleets_fleet_id_members_member_id_with_http_info(self, fleet_id, member_id, **kwargs):
        """
        Kick fleet member
        Kick a fleet member  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'member_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fleets_fleet_id_members_member_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `delete_fleets_fleet_id_members_member_id`")
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params) or (params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `delete_fleets_fleet_id_members_member_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/members/{member_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']
        if 'member_id' in params:
            path_params['member_id'] = params['member_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_fleets_fleet_id_squads_squad_id(self, fleet_id, squad_id, **kwargs):
        """
        Delete fleet squad
        Delete a fleet squad, only empty squads can be deleted  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fleets_fleet_id_squads_squad_id(fleet_id, squad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int squad_id: The squad to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, **kwargs)
        else:
            (data) = self.delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, **kwargs)
            return data

    def delete_fleets_fleet_id_squads_squad_id_with_http_info(self, fleet_id, squad_id, **kwargs):
        """
        Delete fleet squad
        Delete a fleet squad, only empty squads can be deleted  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int squad_id: The squad to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'squad_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fleets_fleet_id_squads_squad_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `delete_fleets_fleet_id_squads_squad_id`")
        # verify the required parameter 'squad_id' is set
        if ('squad_id' not in params) or (params['squad_id'] is None):
            raise ValueError("Missing the required parameter `squad_id` when calling `delete_fleets_fleet_id_squads_squad_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/squads/{squad_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']
        if 'squad_id' in params:
            path_params['squad_id'] = params['squad_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_fleets_fleet_id_wings_wing_id(self, fleet_id, wing_id, **kwargs):
        """
        Delete fleet wing
        Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fleets_fleet_id_wings_wing_id(fleet_id, wing_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, **kwargs)
        else:
            (data) = self.delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, **kwargs)
            return data

    def delete_fleets_fleet_id_wings_wing_id_with_http_info(self, fleet_id, wing_id, **kwargs):
        """
        Delete fleet wing
        Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'wing_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fleets_fleet_id_wings_wing_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `delete_fleets_fleet_id_wings_wing_id`")
        # verify the required parameter 'wing_id' is set
        if ('wing_id' not in params) or (params['wing_id'] is None):
            raise ValueError("Missing the required parameter `wing_id` when calling `delete_fleets_fleet_id_wings_wing_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/wings/{wing_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']
        if 'wing_id' in params:
            path_params['wing_id'] = params['wing_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleets_fleet_id(self, fleet_id, **kwargs):
        """
        Get fleet information
        Return details about a fleet  ---  This route is cached for up to 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleets_fleet_id(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: GetFleetsFleetIdOk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleets_fleet_id_with_http_info(fleet_id, **kwargs)
        else:
            (data) = self.get_fleets_fleet_id_with_http_info(fleet_id, **kwargs)
            return data

    def get_fleets_fleet_id_with_http_info(self, fleet_id, **kwargs):
        """
        Get fleet information
        Return details about a fleet  ---  This route is cached for up to 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleets_fleet_id_with_http_info(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: GetFleetsFleetIdOk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleets_fleet_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `get_fleets_fleet_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetFleetsFleetIdOk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleets_fleet_id_members(self, fleet_id, **kwargs):
        """
        Get fleet members
        Return information about fleet members  ---  This route is cached for up to 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleets_fleet_id_members(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetFleetsFleetIdMembers200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleets_fleet_id_members_with_http_info(fleet_id, **kwargs)
        else:
            (data) = self.get_fleets_fleet_id_members_with_http_info(fleet_id, **kwargs)
            return data

    def get_fleets_fleet_id_members_with_http_info(self, fleet_id, **kwargs):
        """
        Get fleet members
        Return information about fleet members  ---  This route is cached for up to 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleets_fleet_id_members_with_http_info(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetFleetsFleetIdMembers200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'datasource', 'language', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleets_fleet_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `get_fleets_fleet_id_members`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/members/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'language' in params:
            query_params['language'] = params['language']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GetFleetsFleetIdMembers200Ok]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleets_fleet_id_wings(self, fleet_id, **kwargs):
        """
        Get fleet wings
        Return information about wings in a fleet  ---  This route is cached for up to 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleets_fleet_id_wings(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetFleetsFleetIdWings200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)
        else:
            (data) = self.get_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)
            return data

    def get_fleets_fleet_id_wings_with_http_info(self, fleet_id, **kwargs):
        """
        Get fleet wings
        Return information about wings in a fleet  ---  This route is cached for up to 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleets_fleet_id_wings_with_http_info(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetFleetsFleetIdWings200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'datasource', 'language', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleets_fleet_id_wings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `get_fleets_fleet_id_wings`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/wings/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'language' in params:
            query_params['language'] = params['language']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GetFleetsFleetIdWings200Ok]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_fleets_fleet_id_members(self, fleet_id, invitation, **kwargs):
        """
        Create fleet invitation
        Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_fleets_fleet_id_members(fleet_id, invitation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PostFleetsFleetIdMembersInvitation invitation: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, **kwargs)
        else:
            (data) = self.post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, **kwargs)
            return data

    def post_fleets_fleet_id_members_with_http_info(self, fleet_id, invitation, **kwargs):
        """
        Create fleet invitation
        Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PostFleetsFleetIdMembersInvitation invitation: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'invitation', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_fleets_fleet_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `post_fleets_fleet_id_members`")
        # verify the required parameter 'invitation' is set
        if ('invitation' not in params) or (params['invitation'] is None):
            raise ValueError("Missing the required parameter `invitation` when calling `post_fleets_fleet_id_members`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/members/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invitation' in params:
            body_params = params['invitation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_fleets_fleet_id_wings(self, fleet_id, **kwargs):
        """
        Create fleet wing
        Create a new wing in a fleet  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_fleets_fleet_id_wings(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: PostFleetsFleetIdWingsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)
        else:
            (data) = self.post_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)
            return data

    def post_fleets_fleet_id_wings_with_http_info(self, fleet_id, **kwargs):
        """
        Create fleet wing
        Create a new wing in a fleet  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_fleets_fleet_id_wings_with_http_info(fleet_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: PostFleetsFleetIdWingsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_fleets_fleet_id_wings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `post_fleets_fleet_id_wings`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/wings/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PostFleetsFleetIdWingsCreated',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_fleets_fleet_id_wings_wing_id_squads(self, fleet_id, wing_id, **kwargs):
        """
        Create fleet squad
        Create a new squad in a fleet  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_fleets_fleet_id_wings_wing_id_squads(fleet_id, wing_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing_id to create squad in (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: PostFleetsFleetIdWingsWingIdSquadsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, **kwargs)
        else:
            (data) = self.post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, **kwargs)
            return data

    def post_fleets_fleet_id_wings_wing_id_squads_with_http_info(self, fleet_id, wing_id, **kwargs):
        """
        Create fleet squad
        Create a new squad in a fleet  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing_id to create squad in (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: PostFleetsFleetIdWingsWingIdSquadsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'wing_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_fleets_fleet_id_wings_wing_id_squads" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `post_fleets_fleet_id_wings_wing_id_squads`")
        # verify the required parameter 'wing_id' is set
        if ('wing_id' not in params) or (params['wing_id'] is None):
            raise ValueError("Missing the required parameter `wing_id` when calling `post_fleets_fleet_id_wings_wing_id_squads`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/wings/{wing_id}/squads/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']
        if 'wing_id' in params:
            path_params['wing_id'] = params['wing_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PostFleetsFleetIdWingsWingIdSquadsCreated',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_fleets_fleet_id(self, fleet_id, new_settings, **kwargs):
        """
        Update fleet
        Update settings about a fleet  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id(fleet_id, new_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdNewSettings new_settings: What to update for this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_fleets_fleet_id_with_http_info(fleet_id, new_settings, **kwargs)
        else:
            (data) = self.put_fleets_fleet_id_with_http_info(fleet_id, new_settings, **kwargs)
            return data

    def put_fleets_fleet_id_with_http_info(self, fleet_id, new_settings, **kwargs):
        """
        Update fleet
        Update settings about a fleet  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id_with_http_info(fleet_id, new_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdNewSettings new_settings: What to update for this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'new_settings', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id`")
        # verify the required parameter 'new_settings' is set
        if ('new_settings' not in params) or (params['new_settings'] is None):
            raise ValueError("Missing the required parameter `new_settings` when calling `put_fleets_fleet_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_settings' in params:
            body_params = params['new_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_fleets_fleet_id_members_member_id(self, fleet_id, member_id, movement, **kwargs):
        """
        Move fleet member
        Move a fleet member around  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id_members_member_id(fleet_id, member_id, movement, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param PutFleetsFleetIdMembersMemberIdMovement movement: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, **kwargs)
        else:
            (data) = self.put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, **kwargs)
            return data

    def put_fleets_fleet_id_members_member_id_with_http_info(self, fleet_id, member_id, movement, **kwargs):
        """
        Move fleet member
        Move a fleet member around  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param PutFleetsFleetIdMembersMemberIdMovement movement: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'member_id', 'movement', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id_members_member_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id_members_member_id`")
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params) or (params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `put_fleets_fleet_id_members_member_id`")
        # verify the required parameter 'movement' is set
        if ('movement' not in params) or (params['movement'] is None):
            raise ValueError("Missing the required parameter `movement` when calling `put_fleets_fleet_id_members_member_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/members/{member_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']
        if 'member_id' in params:
            path_params['member_id'] = params['member_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'movement' in params:
            body_params = params['movement']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_fleets_fleet_id_squads_squad_id(self, fleet_id, naming, squad_id, **kwargs):
        """
        Rename fleet squad
        Rename a fleet squad  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id_squads_squad_id(fleet_id, naming, squad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdSquadsSquadIdNaming naming: New name of the squad (required)
        :param int squad_id: The squad to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, **kwargs)
        else:
            (data) = self.put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, **kwargs)
            return data

    def put_fleets_fleet_id_squads_squad_id_with_http_info(self, fleet_id, naming, squad_id, **kwargs):
        """
        Rename fleet squad
        Rename a fleet squad  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdSquadsSquadIdNaming naming: New name of the squad (required)
        :param int squad_id: The squad to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'naming', 'squad_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id_squads_squad_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id_squads_squad_id`")
        # verify the required parameter 'naming' is set
        if ('naming' not in params) or (params['naming'] is None):
            raise ValueError("Missing the required parameter `naming` when calling `put_fleets_fleet_id_squads_squad_id`")
        # verify the required parameter 'squad_id' is set
        if ('squad_id' not in params) or (params['squad_id'] is None):
            raise ValueError("Missing the required parameter `squad_id` when calling `put_fleets_fleet_id_squads_squad_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/squads/{squad_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']
        if 'squad_id' in params:
            path_params['squad_id'] = params['squad_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'naming' in params:
            body_params = params['naming']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_fleets_fleet_id_wings_wing_id(self, fleet_id, naming, wing_id, **kwargs):
        """
        Rename fleet wing
        Rename a fleet wing  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id_wings_wing_id(fleet_id, naming, wing_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdWingsWingIdNaming naming: New name of the wing (required)
        :param int wing_id: The wing to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, **kwargs)
        else:
            (data) = self.put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, **kwargs)
            return data

    def put_fleets_fleet_id_wings_wing_id_with_http_info(self, fleet_id, naming, wing_id, **kwargs):
        """
        Rename fleet wing
        Rename a fleet wing  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdWingsWingIdNaming naming: New name of the wing (required)
        :param int wing_id: The wing to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'naming', 'wing_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id_wings_wing_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if ('fleet_id' not in params) or (params['fleet_id'] is None):
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id_wings_wing_id`")
        # verify the required parameter 'naming' is set
        if ('naming' not in params) or (params['naming'] is None):
            raise ValueError("Missing the required parameter `naming` when calling `put_fleets_fleet_id_wings_wing_id`")
        # verify the required parameter 'wing_id' is set
        if ('wing_id' not in params) or (params['wing_id'] is None):
            raise ValueError("Missing the required parameter `wing_id` when calling `put_fleets_fleet_id_wings_wing_id`")


        collection_formats = {}

        resource_path = '/v1/fleets/{fleet_id}/wings/{wing_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']
        if 'wing_id' in params:
            path_params['wing_id'] = params['wing_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'naming' in params:
            body_params = params['naming']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
