# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 0.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class MarketApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_characters_character_id_orders(self, character_id, **kwargs):
        """
        List orders from a character
        List market orders placed by a character  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_characters_character_id_orders(character_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetCharactersCharacterIdOrders200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_characters_character_id_orders_with_http_info(character_id, **kwargs)
        else:
            (data) = self.get_characters_character_id_orders_with_http_info(character_id, **kwargs)
            return data

    def get_characters_character_id_orders_with_http_info(self, character_id, **kwargs):
        """
        List orders from a character
        List market orders placed by a character  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_characters_character_id_orders_with_http_info(character_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetCharactersCharacterIdOrders200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'datasource', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_characters_character_id_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_characters_character_id_orders`")


        collection_formats = {}

        resource_path = '/v1/characters/{character_id}/orders/'.replace('{format}', 'json')
        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GetCharactersCharacterIdOrders200Ok]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_markets_groups(self, **kwargs):
        """
        Get item groups
        Get a list of item groups  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_groups(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str datasource: The server name you would like data from
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_markets_groups_with_http_info(**kwargs)
        else:
            (data) = self.get_markets_groups_with_http_info(**kwargs)
            return data

    def get_markets_groups_with_http_info(self, **kwargs):
        """
        Get item groups
        Get a list of item groups  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_groups_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str datasource: The server name you would like data from
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_markets_groups" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/v1/markets/groups/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[int]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_markets_groups_market_group_id(self, market_group_id, **kwargs):
        """
        Get item group information
        Get information on an item group  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_groups_market_group_id(market_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int market_group_id: An Eve item group ID (required)
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: GetMarketsGroupsMarketGroupIdOk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_markets_groups_market_group_id_with_http_info(market_group_id, **kwargs)
        else:
            (data) = self.get_markets_groups_market_group_id_with_http_info(market_group_id, **kwargs)
            return data

    def get_markets_groups_market_group_id_with_http_info(self, market_group_id, **kwargs):
        """
        Get item group information
        Get information on an item group  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_groups_market_group_id_with_http_info(market_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int market_group_id: An Eve item group ID (required)
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: GetMarketsGroupsMarketGroupIdOk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market_group_id', 'datasource', 'language', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_markets_groups_market_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'market_group_id' is set
        if ('market_group_id' not in params) or (params['market_group_id'] is None):
            raise ValueError("Missing the required parameter `market_group_id` when calling `get_markets_groups_market_group_id`")


        collection_formats = {}

        resource_path = '/v1/markets/groups/{market_group_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'market_group_id' in params:
            path_params['market_group_id'] = params['market_group_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'language' in params:
            query_params['language'] = params['language']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetMarketsGroupsMarketGroupIdOk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_markets_prices(self, **kwargs):
        """
        List market prices
        Return a list of prices  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_prices(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str datasource: The server name you would like data from
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsPrices200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_markets_prices_with_http_info(**kwargs)
        else:
            (data) = self.get_markets_prices_with_http_info(**kwargs)
            return data

    def get_markets_prices_with_http_info(self, **kwargs):
        """
        List market prices
        Return a list of prices  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_prices_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str datasource: The server name you would like data from
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsPrices200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_markets_prices" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/v1/markets/prices/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GetMarketsPrices200Ok]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_markets_region_id_history(self, region_id, type_id, **kwargs):
        """
        List historical market statistics in a region
        Return a list of historical market statistics for the specified type in a region  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_region_id_history(region_id, type_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int region_id: Return statistics in this region (required)
        :param int type_id: Return statistics for this type (required)
        :param str datasource: The server name you would like data from
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsRegionIdHistory200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_markets_region_id_history_with_http_info(region_id, type_id, **kwargs)
        else:
            (data) = self.get_markets_region_id_history_with_http_info(region_id, type_id, **kwargs)
            return data

    def get_markets_region_id_history_with_http_info(self, region_id, type_id, **kwargs):
        """
        List historical market statistics in a region
        Return a list of historical market statistics for the specified type in a region  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_region_id_history_with_http_info(region_id, type_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int region_id: Return statistics in this region (required)
        :param int type_id: Return statistics for this type (required)
        :param str datasource: The server name you would like data from
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsRegionIdHistory200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id', 'type_id', 'datasource', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_markets_region_id_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params) or (params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `get_markets_region_id_history`")
        # verify the required parameter 'type_id' is set
        if ('type_id' not in params) or (params['type_id'] is None):
            raise ValueError("Missing the required parameter `type_id` when calling `get_markets_region_id_history`")


        collection_formats = {}

        resource_path = '/v1/markets/{region_id}/history/'.replace('{format}', 'json')
        path_params = {}
        if 'region_id' in params:
            path_params['region_id'] = params['region_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'type_id' in params:
            query_params['type_id'] = params['type_id']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GetMarketsRegionIdHistory200Ok]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_markets_region_id_orders(self, order_type, region_id, **kwargs):
        """
        List orders in a region
        Return a list of orders in a region  ---  This route is cached for up to 300 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_region_id_orders(order_type, region_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_type: Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.  (required)
        :param int region_id: Return orders in this region (required)
        :param str datasource: The server name you would like data from
        :param int page: Which page to query, only used for querying without type_id. Starting at 1 
        :param int type_id: Return orders only for this type
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsRegionIdOrders200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_markets_region_id_orders_with_http_info(order_type, region_id, **kwargs)
        else:
            (data) = self.get_markets_region_id_orders_with_http_info(order_type, region_id, **kwargs)
            return data

    def get_markets_region_id_orders_with_http_info(self, order_type, region_id, **kwargs):
        """
        List orders in a region
        Return a list of orders in a region  ---  This route is cached for up to 300 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_region_id_orders_with_http_info(order_type, region_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_type: Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.  (required)
        :param int region_id: Return orders in this region (required)
        :param str datasource: The server name you would like data from
        :param int page: Which page to query, only used for querying without type_id. Starting at 1 
        :param int type_id: Return orders only for this type
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsRegionIdOrders200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_type', 'region_id', 'datasource', 'page', 'type_id', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_markets_region_id_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_type' is set
        if ('order_type' not in params) or (params['order_type'] is None):
            raise ValueError("Missing the required parameter `order_type` when calling `get_markets_region_id_orders`")
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params) or (params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `get_markets_region_id_orders`")


        collection_formats = {}

        resource_path = '/v1/markets/{region_id}/orders/'.replace('{format}', 'json')
        path_params = {}
        if 'region_id' in params:
            path_params['region_id'] = params['region_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'order_type' in params:
            query_params['order_type'] = params['order_type']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'type_id' in params:
            query_params['type_id'] = params['type_id']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GetMarketsRegionIdOrders200Ok]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_markets_structures_structure_id(self, structure_id, **kwargs):
        """
        List orders in a structure
        Return all orders in a structure  ---  This route is cached for up to 300 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_structures_structure_id(structure_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int structure_id: Return orders in this structure (required)
        :param str datasource: The server name you would like data from
        :param int page: Which page to query, starting at 1
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsStructuresStructureId200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_markets_structures_structure_id_with_http_info(structure_id, **kwargs)
        else:
            (data) = self.get_markets_structures_structure_id_with_http_info(structure_id, **kwargs)
            return data

    def get_markets_structures_structure_id_with_http_info(self, structure_id, **kwargs):
        """
        List orders in a structure
        Return all orders in a structure  ---  This route is cached for up to 300 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_markets_structures_structure_id_with_http_info(structure_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int structure_id: Return orders in this structure (required)
        :param str datasource: The server name you would like data from
        :param int page: Which page to query, starting at 1
        :param str token: Access token to use, if preferred over a header
        :param str user_agent: Client identifier, takes precedence over headers
        :param str x_user_agent: Client identifier, takes precedence over User-Agent
        :return: list[GetMarketsStructuresStructureId200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['structure_id', 'datasource', 'page', 'token', 'user_agent', 'x_user_agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_markets_structures_structure_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'structure_id' is set
        if ('structure_id' not in params) or (params['structure_id'] is None):
            raise ValueError("Missing the required parameter `structure_id` when calling `get_markets_structures_structure_id`")


        collection_formats = {}

        resource_path = '/v1/markets/structures/{structure_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'structure_id' in params:
            path_params['structure_id'] = params['structure_id']

        query_params = {}
        if 'datasource' in params:
            query_params['datasource'] = params['datasource']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'token' in params:
            query_params['token'] = params['token']
        if 'user_agent' in params:
            query_params['user_agent'] = params['user_agent']

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GetMarketsStructuresStructureId200Ok]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
